package first;

import java.lang.Math;

public class OperatorTest {
	public static void main(String[] args) {

		int num1 = 10;
		int num2 = 8;

		System.out.println("10/8 = " + num1 / num2); // 정수형이라서 소수점 표현 X
		System.out.println("10/8 = " + num1 % -8);
		System.out.println("10/8 = " + num1 % num2);
		System.out.println("10f/8f = " + 10f / 8f);
		System.out.println("10f/8 = " + 10f / 8); // float형으로 출력됨
		System.out.println("10/8 = " + num1 / (float) num2);
		System.out.println();
		System.out.println();

		char c1 = 'A';
		char c2 = 'B';

		System.out.println("'A' < 'B' => " + (c1 < c2)); // 65 < 66
		System.out.println("'0' == 0 => " + ('0' == 0)); // 48 == 0
		System.out.println("10.0d == 10.0f => " + (10.0d == 10.0f)); // 소수가 없으므로 10.0d == 10.0d
		System.out.println("0.1d == 0.1f => " + (0.1d == 0.1f)); // 소수가 있으므로 0.1d == 0.1f

		double d = (double) 0.1f;
		System.out.println("d => " + d); // byte수가 늘어난 만큼 다른 수가 채움
		System.out.println("(float)d == 0.1f => " + ((float) d == 0.1f)); // byte가 줄어서 숫자들이 잘림

		System.out.println();
		System.out.println();

		num1 = 10;
		num2 = 20;

		boolean result1 = num1 == 10 && num2 == 20;
		boolean result2 = num1 <= 12 || num2 >= 30;

		System.out.println("num1 == 10 && num2 == 20 => " + result1);
		;
		System.out.println("num1 <= 12 || num2 >= 30 => " + result2);

		if (!(num1 == num2)) {
			System.out.println("num1과 num2는 같지 않다.");
		} else {
			System.out.println("num1과 num2는 같다.");
		}

		System.out.println();
		System.out.println();

		float pi = 3.141592f;
		float sPi = (int) (pi * 100) / 100f;

		System.out.println(sPi);

		int price = 11234;
		int price2 = price / 1000 * 1000; // 100단위까지 절사

		System.out.println(price2);

		float sPi2 = Math.round(pi * 100);// Math.round 함수로 반올림
		System.out.println(sPi2);

		System.out.println();
		System.out.println();

		int i = 5, j = 0;
		
		System.out.println(i++); // 출력 : 5, i = 6
		System.out.println(++j); // 출력 : 6, j : 6
		System.out.println("i = "+i+", j = "+j);
		
		System.out.println();
		System.out.println();
		
		//문자열 처리 : String 클래스 이용 -> 객체 생성 -> 클래스가 가지는 변수와 메서드를 메모리에 로드
		//참조 변수 : 객체의 메모리 주소값을 저장
		String str = null; // null -> 참조변수가 객체의 주소값을 저장하고 있지 않음
		
		str = "";// "" --> 공백 문자열을 이용한 객체를 생성하고 주소값을 반환
		str.toString();		
		
		
		
		
		
		

	}
}
